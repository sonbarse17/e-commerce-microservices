version: '3.8'

services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: ecommerce-mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=ecommerce
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # API Gateway
  api-gateway:
    build: 
      context: ./backend
      dockerfile: api-gateway/Dockerfile
    container_name: ecommerce-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - ALLOWED_ORIGINS=http://localhost:4200
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./backend
      dockerfile: user-service/Dockerfile
    container_name: ecommerce-users
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_users
      - DB_USERNAME=root
      - DB_PASSWORD=password
      - JWT_SECRET=your-jwt-secret-key-here
      - JWT_EXPIRATION=86400000
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./backend
      dockerfile: product-service/Dockerfile
    container_name: ecommerce-products
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_products
      - DB_USERNAME=root
      - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: ./backend
      dockerfile: inventory-service/Dockerfile
    container_name: ecommerce-inventory
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_inventory
      - DB_USERNAME=root
      - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./backend
      dockerfile: order-service/Dockerfile
    container_name: ecommerce-orders
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_orders
      - DB_USERNAME=root
      - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./backend
      dockerfile: payment-service/Dockerfile
    container_name: ecommerce-payments
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_payments
      - DB_USERNAME=root
      - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Cart Service
  cart-service:
    build:
      context: ./backend
      dockerfile: cart-service/Dockerfile
    container_name: ecommerce-cart
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_cart
      - DB_USERNAME=root
      - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./backend
      dockerfile: notification-service/Dockerfile
    container_name: ecommerce-notifications
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_notifications
      - DB_USERNAME=root
      - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Review Service
  review-service:
    build:
      context: ./backend
      dockerfile: review-service/Dockerfile
    container_name: ecommerce-reviews
    ports:
      - "8088:8088"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_reviews
      - DB_USERNAME=root
      - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./backend
      dockerfile: analytics-service/Dockerfile
    container_name: ecommerce-analytics
    ports:
      - "8089:8089"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=mysql
      - DB_NAME=ecommerce_analytics
      - DB_USERNAME=root
      - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build: ./frontend
    container_name: ecommerce-frontend
    ports:
      - "4200:4200"
    environment:
      - API_BASE_URL=http://localhost:8080/api
    depends_on:
      - api-gateway
    restart: unless-stopped

volumes:
  mysql_data:

networks:
  default:
    name: ecommerce-network